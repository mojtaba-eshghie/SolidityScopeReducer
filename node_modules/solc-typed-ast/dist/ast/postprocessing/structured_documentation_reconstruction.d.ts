import { ASTNode } from "../ast_node";
import { ASTContext, ASTNodePostprocessor, FileMap } from "../ast_reader";
import { ContractDefinition, EnumDefinition, ErrorDefinition, EventDefinition, FunctionDefinition, ModifierDefinition, StructDefinition, VariableDeclaration } from "../implementation/declaration";
import { StructuredDocumentation } from "../implementation/meta/structured_documentation";
import { Statement, StatementWithChildren } from "../implementation/statement/statement";
type FragmentCoordinates = [number, number, number];
export declare class StructuredDocumentationReconstructor {
    /**
     * Extracts fragment at provided source location,
     * then tries to find documentation and construct dummy `StructuredDocumentation`.
     * Returns produced `StructuredDocumentation` on success or `undefined`
     * if documentation was not detected in extracted fragment.
     */
    fragmentCoordsToStructDoc(coords: FragmentCoordinates, source: Uint8Array): StructuredDocumentation | undefined;
    getPrecedingGapCoordinates(node: ASTNode): FragmentCoordinates;
    getDanglingGapCoordinates(node: ASTNode): FragmentCoordinates;
}
type SupportedNode = FunctionDefinition | ContractDefinition | VariableDeclaration | ErrorDefinition | EventDefinition | EnumDefinition | StructDefinition | ModifierDefinition | Statement | StatementWithChildren<ASTNode>;
export declare class StructuredDocumentationReconstructingPostprocessor implements ASTNodePostprocessor<SupportedNode> {
    private reconstructor;
    process(node: SupportedNode, context: ASTContext, sources?: FileMap): void;
    isSupportedNode(node: ASTNode): node is SupportedNode;
}
export {};
//# sourceMappingURL=structured_documentation_reconstruction.d.ts.map