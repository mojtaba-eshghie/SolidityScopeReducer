"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.XPath = void 0;
const jSel = require("jsel");
/* istanbul ignore next */
jSel.addFunction(null, "is", (...args) => {
    if (args.length !== 2) {
        throw new Error('Function "is" expects (object)');
    }
    const [context, pathExpr] = args;
    const value = pathExpr.evaluate(context);
    if (value.constructor.name === "XNodeSet") {
        const tree = value.tree;
        if (tree && tree.node && !tree.node.value) {
            value.tree = null;
        }
    }
    return value.bool();
});
const SKIP = new Set(["context", "requiredContext", "raw", "children", "ownChildren"]);
const ASTNodeSchema = {
    nodeName: (node) => node.type,
    childNodes: (node) => node.children,
    attributes: (node) => {
        const attrs = {};
        for (const [k, v] of node.getFieldValues().entries()) {
            if (SKIP.has(k)) {
                continue;
            }
            attrs[k] = v;
        }
        for (const [g, v] of node.getGettersValues().entries()) {
            if (SKIP.has(g)) {
                continue;
            }
            attrs[g] = v;
        }
        return attrs;
    },
    nodeValue: () => undefined
};
class XPath {
    constructor(node) {
        const dom = jSel(node);
        dom.schema(ASTNodeSchema);
        this.dom = dom;
    }
    query(path) {
        return this.dom.selectAll(path);
    }
}
exports.XPath = XPath;
//# sourceMappingURL=xpath.js.map