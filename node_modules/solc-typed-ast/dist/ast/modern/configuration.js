"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModernConfiguration = void 0;
const ast_node_1 = require("../ast_node");
const contract_definition_1 = require("../implementation/declaration/contract_definition");
const enum_definition_1 = require("../implementation/declaration/enum_definition");
const enum_value_1 = require("../implementation/declaration/enum_value");
const error_definition_1 = require("../implementation/declaration/error_definition");
const event_definition_1 = require("../implementation/declaration/event_definition");
const function_definition_1 = require("../implementation/declaration/function_definition");
const modifier_definition_1 = require("../implementation/declaration/modifier_definition");
const struct_definition_1 = require("../implementation/declaration/struct_definition");
const user_defined_value_type_definition_1 = require("../implementation/declaration/user_defined_value_type_definition");
const variable_declaration_1 = require("../implementation/declaration/variable_declaration");
const assignment_1 = require("../implementation/expression/assignment");
const binary_operation_1 = require("../implementation/expression/binary_operation");
const conditional_1 = require("../implementation/expression/conditional");
const elementary_type_name_expression_1 = require("../implementation/expression/elementary_type_name_expression");
const function_call_1 = require("../implementation/expression/function_call");
const function_call_options_1 = require("../implementation/expression/function_call_options");
const identifier_1 = require("../implementation/expression/identifier");
const index_access_1 = require("../implementation/expression/index_access");
const index_range_access_1 = require("../implementation/expression/index_range_access");
const literal_1 = require("../implementation/expression/literal");
const member_access_1 = require("../implementation/expression/member_access");
const new_expression_1 = require("../implementation/expression/new_expression");
const tuple_expression_1 = require("../implementation/expression/tuple_expression");
const unary_operation_1 = require("../implementation/expression/unary_operation");
const identifier_path_1 = require("../implementation/meta/identifier_path");
const import_directive_1 = require("../implementation/meta/import_directive");
const inheritance_specifier_1 = require("../implementation/meta/inheritance_specifier");
const modifier_invocation_1 = require("../implementation/meta/modifier_invocation");
const override_specifier_1 = require("../implementation/meta/override_specifier");
const parameter_list_1 = require("../implementation/meta/parameter_list");
const pragma_directive_1 = require("../implementation/meta/pragma_directive");
const source_unit_1 = require("../implementation/meta/source_unit");
const structured_documentation_1 = require("../implementation/meta/structured_documentation");
const using_for_directive_1 = require("../implementation/meta/using_for_directive");
const block_1 = require("../implementation/statement/block");
const break_1 = require("../implementation/statement/break");
const continue_1 = require("../implementation/statement/continue");
const do_while_statement_1 = require("../implementation/statement/do_while_statement");
const emit_statement_1 = require("../implementation/statement/emit_statement");
const expression_statement_1 = require("../implementation/statement/expression_statement");
const for_statement_1 = require("../implementation/statement/for_statement");
const if_statement_1 = require("../implementation/statement/if_statement");
const inline_assembly_1 = require("../implementation/statement/inline_assembly");
const placeholder_statement_1 = require("../implementation/statement/placeholder_statement");
const return_1 = require("../implementation/statement/return");
const revert_statement_1 = require("../implementation/statement/revert_statement");
const throw_1 = require("../implementation/statement/throw");
const try_catch_clause_1 = require("../implementation/statement/try_catch_clause");
const try_statement_1 = require("../implementation/statement/try_statement");
const unchecked_block_1 = require("../implementation/statement/unchecked_block");
const variable_declaration_statement_1 = require("../implementation/statement/variable_declaration_statement");
const while_statement_1 = require("../implementation/statement/while_statement");
const array_type_name_1 = require("../implementation/type/array_type_name");
const elementary_type_name_1 = require("../implementation/type/elementary_type_name");
const function_type_name_1 = require("../implementation/type/function_type_name");
const mapping_1 = require("../implementation/type/mapping");
const user_defined_type_name_1 = require("../implementation/type/user_defined_type_name");
const array_type_name_processor_1 = require("./array_type_name_processor");
const assignment_processor_1 = require("./assignment_processor");
const binary_operation_processor_1 = require("./binary_operation_processor");
const block_processor_1 = require("./block_processor");
const break_processor_1 = require("./break_processor");
const conditional_processor_1 = require("./conditional_processor");
const continue_processor_1 = require("./continue_processor");
const contract_definition_processor_1 = require("./contract_definition_processor");
const do_while_statement_processor_1 = require("./do_while_statement_processor");
const elementary_type_name_expression_processor_1 = require("./elementary_type_name_expression_processor");
const elementary_type_name_processor_1 = require("./elementary_type_name_processor");
const emit_statement_processor_1 = require("./emit_statement_processor");
const enum_definition_processor_1 = require("./enum_definition_processor");
const enum_value_processor_1 = require("./enum_value_processor");
const error_definition_processor_1 = require("./error_definition_processor");
const event_definition_processor_1 = require("./event_definition_processor");
const expression_statement_processor_1 = require("./expression_statement_processor");
const for_statement_processor_1 = require("./for_statement_processor");
const function_call_options_processor_1 = require("./function_call_options_processor");
const function_call_processor_1 = require("./function_call_processor");
const function_definition_processor_1 = require("./function_definition_processor");
const function_type_name_processor_1 = require("./function_type_name_processor");
const identifier_path_processor_1 = require("./identifier_path_processor");
const identifier_processor_1 = require("./identifier_processor");
const if_statement_processor_1 = require("./if_statement_processor");
const import_directive_processor_1 = require("./import_directive_processor");
const index_access_processor_1 = require("./index_access_processor");
const index_range_access_processor_1 = require("./index_range_access_processor");
const inheritance_specifier_processor_1 = require("./inheritance_specifier_processor");
const inline_assembly_processor_1 = require("./inline_assembly_processor");
const literal_processor_1 = require("./literal_processor");
const mapping_processor_1 = require("./mapping_processor");
const member_access_processor_1 = require("./member_access_processor");
const modifier_definition_processor_1 = require("./modifier_definition_processor");
const modifier_invocation_processor_1 = require("./modifier_invocation_processor");
const new_expression_processor_1 = require("./new_expression_processor");
const node_processor_1 = require("./node_processor");
const override_specifier_processor_1 = require("./override_specifier_processor");
const parameter_list_processor_1 = require("./parameter_list_processor");
const placeholder_statement_processor_1 = require("./placeholder_statement_processor");
const pragma_directive_processor_1 = require("./pragma_directive_processor");
const return_processor_1 = require("./return_processor");
const revert_statement_processor_1 = require("./revert_statement_processor");
const source_unit_processor_1 = require("./source_unit_processor");
const structured_documentation_processor_1 = require("./structured_documentation_processor");
const struct_definition_processor_1 = require("./struct_definition_processor");
const throw_processor_1 = require("./throw_processor");
const try_catch_clause_processor_1 = require("./try_catch_clause_processor");
const try_statement_processor_1 = require("./try_statement_processor");
const tuple_expression_processor_1 = require("./tuple_expression_processor");
const unary_operation_processor_1 = require("./unary_operation_processor");
const unchecked_block_processor_1 = require("./unchecked_block_processor");
const user_defined_type_name_processor_1 = require("./user_defined_type_name_processor");
const user_defined_value_type_definition_processor_1 = require("./user_defined_value_type_definition_processor");
const using_for_directive_processor_1 = require("./using_for_directive_processor");
const variable_declaration_processor_1 = require("./variable_declaration_processor");
const variable_declaration_statement_processor_1 = require("./variable_declaration_statement_processor");
const while_statement_processor_1 = require("./while_statement_processor");
const processors = {
    /**
     * For any non-existent nodes:
     */
    Default: new node_processor_1.ModernNodeProcessor(),
    /**
     * Precise for specific nodes:
     */
    SourceUnit: new source_unit_processor_1.ModernSourceUnitProcessor(),
    PragmaDirective: new pragma_directive_processor_1.ModernPragmaDirectiveProcessor(),
    IdentifierPath: new identifier_path_processor_1.ModernIdentifierPathProcessor(),
    ImportDirective: new import_directive_processor_1.ModernImportDirectiveProcessor(),
    UsingForDirective: new using_for_directive_processor_1.ModernUsingForDirectiveProcessor(),
    ContractDefinition: new contract_definition_processor_1.ModernContractDefinitionProcessor(),
    InheritanceSpecifier: new inheritance_specifier_processor_1.ModernInheritanceSpecifierProcessor(),
    StructDefinition: new struct_definition_processor_1.ModernStructDefinitionProcessor(),
    ErrorDefinition: new error_definition_processor_1.ModernErrorDefinitionProcessor(),
    EventDefinition: new event_definition_processor_1.ModernEventDefinitionProcessor(),
    FunctionDefinition: new function_definition_processor_1.ModernFunctionDefinitionProcessor(),
    VariableDeclaration: new variable_declaration_processor_1.ModernVariableDeclarationProcessor(),
    Block: new block_processor_1.ModernBlockProcessor(),
    OverrideSpecifier: new override_specifier_processor_1.ModernOverrideSpecifierProcessor(),
    StructuredDocumentation: new structured_documentation_processor_1.ModernStructuredDocumentationProcessor(),
    ParameterList: new parameter_list_processor_1.ModernParameterListProcessor(),
    EnumDefinition: new enum_definition_processor_1.ModernEnumDefinitionProcessor(),
    EnumValue: new enum_value_processor_1.ModernEnumValueProcessor(),
    ModifierDefinition: new modifier_definition_processor_1.ModernModifierDefinitionProcessor(),
    ModifierInvocation: new modifier_invocation_processor_1.ModernModifierInvocationProcessor(),
    UserDefinedTypeName: new user_defined_type_name_processor_1.ModernUserDefinedTypeNameProcessor(),
    ElementaryTypeName: new elementary_type_name_processor_1.ModernElementaryTypeNameProcessor(),
    FunctionTypeName: new function_type_name_processor_1.ModernFunctionTypeNameProcessor(),
    ArrayTypeName: new array_type_name_processor_1.ModernArrayTypeNameProcessor(),
    Mapping: new mapping_processor_1.ModernMappingProcessor(),
    Literal: new literal_processor_1.ModernLiteralProcessor(),
    Conditional: new conditional_processor_1.ModernConditionalProcessor(),
    ElementaryTypeNameExpression: new elementary_type_name_expression_processor_1.ModernElementaryTypeNameExpressionProcessor(),
    IndexAccess: new index_access_processor_1.ModernIndexAccessProcessor(),
    IndexRangeAccess: new index_range_access_processor_1.ModernIndexRangeAccessProcessor(),
    Identifier: new identifier_processor_1.ModernIdentifierProcessor(),
    MemberAccess: new member_access_processor_1.ModernMemberAccessProcessor(),
    NewExpression: new new_expression_processor_1.ModernNewExpressionProcessor(),
    TupleExpression: new tuple_expression_processor_1.ModernTupleExpressionProcessor(),
    UnaryOperation: new unary_operation_processor_1.ModernUnaryOperationProcessor(),
    BinaryOperation: new binary_operation_processor_1.ModernBinaryOperationProcessor(),
    FunctionCallOptions: new function_call_options_processor_1.ModernFunctionCallOptionsProcessor(),
    FunctionCall: new function_call_processor_1.ModernFunctionCallProcessor(),
    Assignment: new assignment_processor_1.ModernAssignmentProcessor(),
    IfStatement: new if_statement_processor_1.ModernIfStatementProcessor(),
    ForStatement: new for_statement_processor_1.ModernForStatementProcessor(),
    DoWhileStatement: new do_while_statement_processor_1.ModernDoWhileStatementProcessor(),
    WhileStatement: new while_statement_processor_1.ModernWhileStatementProcessor(),
    TryCatchClause: new try_catch_clause_processor_1.ModernTryCatchClauseProcessor(),
    TryStatement: new try_statement_processor_1.ModernTryStatementProcessor(),
    Return: new return_processor_1.ModernReturnProcessor(),
    RevertStatement: new revert_statement_processor_1.ModernRevertStatementProcessor(),
    EmitStatement: new emit_statement_processor_1.ModernEmitStatementProcessor(),
    ExpressionStatement: new expression_statement_processor_1.ModernExpressionStatementProcessor(),
    UncheckedBlock: new unchecked_block_processor_1.ModernUncheckedBlockProcessor(),
    VariableDeclarationStatement: new variable_declaration_statement_processor_1.ModernVariableDeclarationStatementProcessor(),
    InlineAssembly: new inline_assembly_processor_1.ModernInlineAssemblyProcessor(),
    Break: new break_processor_1.ModernBreakProcessor(),
    Continue: new continue_processor_1.ModernContinueProcessor(),
    PlaceholderStatement: new placeholder_statement_processor_1.ModernPlaceholderStatementProcessor(),
    Throw: new throw_processor_1.ModernThrowProcessor(),
    UserDefinedValueTypeDefinition: new user_defined_value_type_definition_processor_1.ModernUserDefinedValueTypeDefinitionProcessor()
};
exports.ModernConfiguration = {
    signatureDetector: (raw) => raw.nodeType,
    rules: {
        Default: {
            constructor: ast_node_1.ASTNode,
            processor: processors.Default
        },
        SourceUnit: {
            constructor: source_unit_1.SourceUnit,
            processor: processors.SourceUnit
        },
        PragmaDirective: {
            constructor: pragma_directive_1.PragmaDirective,
            processor: processors.PragmaDirective
        },
        IdentifierPath: {
            constructor: identifier_path_1.IdentifierPath,
            processor: processors.IdentifierPath
        },
        ImportDirective: {
            constructor: import_directive_1.ImportDirective,
            processor: processors.ImportDirective
        },
        UsingForDirective: {
            constructor: using_for_directive_1.UsingForDirective,
            processor: processors.UsingForDirective
        },
        ContractDefinition: {
            constructor: contract_definition_1.ContractDefinition,
            processor: processors.ContractDefinition
        },
        InheritanceSpecifier: {
            constructor: inheritance_specifier_1.InheritanceSpecifier,
            processor: processors.InheritanceSpecifier
        },
        UserDefinedTypeName: {
            constructor: user_defined_type_name_1.UserDefinedTypeName,
            processor: processors.UserDefinedTypeName
        },
        FunctionDefinition: {
            constructor: function_definition_1.FunctionDefinition,
            processor: processors.FunctionDefinition
        },
        OverrideSpecifier: {
            constructor: override_specifier_1.OverrideSpecifier,
            processor: processors.OverrideSpecifier
        },
        StructuredDocumentation: {
            constructor: structured_documentation_1.StructuredDocumentation,
            processor: processors.StructuredDocumentation
        },
        ParameterList: {
            constructor: parameter_list_1.ParameterList,
            processor: processors.ParameterList
        },
        Block: {
            constructor: block_1.Block,
            processor: processors.Block
        },
        VariableDeclaration: {
            constructor: variable_declaration_1.VariableDeclaration,
            processor: processors.VariableDeclaration
        },
        StructDefinition: {
            constructor: struct_definition_1.StructDefinition,
            processor: processors.StructDefinition
        },
        ModifierDefinition: {
            constructor: modifier_definition_1.ModifierDefinition,
            processor: processors.ModifierDefinition
        },
        ModifierInvocation: {
            constructor: modifier_invocation_1.ModifierInvocation,
            processor: processors.ModifierInvocation
        },
        Identifier: {
            constructor: identifier_1.Identifier,
            processor: processors.Identifier
        },
        ErrorDefinition: {
            constructor: error_definition_1.ErrorDefinition,
            processor: processors.ErrorDefinition
        },
        EventDefinition: {
            constructor: event_definition_1.EventDefinition,
            processor: processors.EventDefinition
        },
        EnumDefinition: {
            constructor: enum_definition_1.EnumDefinition,
            processor: processors.EnumDefinition
        },
        EnumValue: {
            constructor: enum_value_1.EnumValue,
            processor: processors.EnumValue
        },
        ElementaryTypeName: {
            constructor: elementary_type_name_1.ElementaryTypeName,
            processor: processors.ElementaryTypeName
        },
        FunctionTypeName: {
            constructor: function_type_name_1.FunctionTypeName,
            processor: processors.FunctionTypeName
        },
        ArrayTypeName: {
            constructor: array_type_name_1.ArrayTypeName,
            processor: processors.ArrayTypeName
        },
        Mapping: {
            constructor: mapping_1.Mapping,
            processor: processors.Mapping
        },
        Literal: {
            constructor: literal_1.Literal,
            processor: processors.Literal
        },
        Conditional: {
            constructor: conditional_1.Conditional,
            processor: processors.Conditional
        },
        ElementaryTypeNameExpression: {
            constructor: elementary_type_name_expression_1.ElementaryTypeNameExpression,
            processor: processors.ElementaryTypeNameExpression
        },
        FunctionCallOptions: {
            constructor: function_call_options_1.FunctionCallOptions,
            processor: processors.FunctionCallOptions
        },
        FunctionCall: {
            constructor: function_call_1.FunctionCall,
            processor: processors.FunctionCall
        },
        IndexAccess: {
            constructor: index_access_1.IndexAccess,
            processor: processors.IndexAccess
        },
        IndexRangeAccess: {
            constructor: index_range_access_1.IndexRangeAccess,
            processor: processors.IndexRangeAccess
        },
        MemberAccess: {
            constructor: member_access_1.MemberAccess,
            processor: processors.MemberAccess
        },
        NewExpression: {
            constructor: new_expression_1.NewExpression,
            processor: processors.NewExpression
        },
        TupleExpression: {
            constructor: tuple_expression_1.TupleExpression,
            processor: processors.TupleExpression
        },
        UnaryOperation: {
            constructor: unary_operation_1.UnaryOperation,
            processor: processors.UnaryOperation
        },
        BinaryOperation: {
            constructor: binary_operation_1.BinaryOperation,
            processor: processors.BinaryOperation
        },
        Assignment: {
            constructor: assignment_1.Assignment,
            processor: processors.Assignment
        },
        IfStatement: {
            constructor: if_statement_1.IfStatement,
            processor: processors.IfStatement
        },
        Continue: {
            constructor: continue_1.Continue,
            processor: processors.Continue
        },
        Break: {
            constructor: break_1.Break,
            processor: processors.Break
        },
        Return: {
            constructor: return_1.Return,
            processor: processors.Return
        },
        RevertStatement: {
            constructor: revert_statement_1.RevertStatement,
            processor: processors.RevertStatement
        },
        ForStatement: {
            constructor: for_statement_1.ForStatement,
            processor: processors.ForStatement
        },
        WhileStatement: {
            constructor: while_statement_1.WhileStatement,
            processor: processors.WhileStatement
        },
        DoWhileStatement: {
            constructor: do_while_statement_1.DoWhileStatement,
            processor: processors.DoWhileStatement
        },
        TryCatchClause: {
            constructor: try_catch_clause_1.TryCatchClause,
            processor: processors.TryCatchClause
        },
        TryStatement: {
            constructor: try_statement_1.TryStatement,
            processor: processors.TryStatement
        },
        EmitStatement: {
            constructor: emit_statement_1.EmitStatement,
            processor: processors.EmitStatement
        },
        ExpressionStatement: {
            constructor: expression_statement_1.ExpressionStatement,
            processor: processors.ExpressionStatement
        },
        PlaceholderStatement: {
            constructor: placeholder_statement_1.PlaceholderStatement,
            processor: processors.PlaceholderStatement
        },
        UncheckedBlock: {
            constructor: unchecked_block_1.UncheckedBlock,
            processor: processors.UncheckedBlock
        },
        VariableDeclarationStatement: {
            constructor: variable_declaration_statement_1.VariableDeclarationStatement,
            processor: processors.VariableDeclarationStatement
        },
        InlineAssembly: {
            constructor: inline_assembly_1.InlineAssembly,
            processor: processors.InlineAssembly
        },
        Throw: {
            constructor: throw_1.Throw,
            processor: processors.Throw
        },
        UserDefinedValueTypeDefinition: {
            constructor: user_defined_value_type_definition_1.UserDefinedValueTypeDefinition,
            processor: processors.UserDefinedValueTypeDefinition
        }
    }
};
//# sourceMappingURL=configuration.js.map