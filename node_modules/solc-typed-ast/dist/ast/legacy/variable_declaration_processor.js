"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LegacyVariableDeclarationProcessor = void 0;
const constants_1 = require("../constants");
const override_specifier_1 = require("../implementation/meta/override_specifier");
const type_name_1 = require("../implementation/type/type_name");
const node_processor_1 = require("./node_processor");
class LegacyVariableDeclarationProcessor extends node_processor_1.LegacyNodeProcessor {
    process(reader, config, raw) {
        const [id, src] = super.process(reader, config, raw);
        const attributes = raw.attributes;
        const children = reader.convertArray(raw.children, config);
        const constant = attributes.constant;
        const indexed = attributes.indexed || false;
        const name = attributes.name;
        const scope = attributes.scope;
        const stateVariable = attributes.stateVariable;
        const storageLocation = attributes.storageLocation;
        const visibility = attributes.visibility;
        const typeString = attributes.type;
        let mutability;
        if (typeof attributes.mutability === "string") {
            mutability = attributes.mutability;
        }
        else {
            mutability = constant ? constants_1.Mutability.Constant : constants_1.Mutability.Mutable;
        }
        const [typeName, overrideSpecifier, value, documentation] = this.extract(children);
        return [
            id,
            src,
            constant,
            indexed,
            name,
            scope,
            stateVariable,
            storageLocation,
            visibility,
            mutability,
            typeString,
            documentation,
            typeName,
            overrideSpecifier,
            value,
            undefined,
            raw
        ];
    }
    extract(children) {
        let node = children.shift();
        let type;
        if (node instanceof type_name_1.TypeName) {
            type = node;
            node = children.shift();
        }
        let overrideSpecifier;
        if (node instanceof override_specifier_1.OverrideSpecifier) {
            overrideSpecifier = node;
            node = children.shift();
        }
        let value;
        if (node) {
            value = node;
            node = children.shift();
        }
        let documentation;
        if (node) {
            documentation = node;
        }
        return [type, overrideSpecifier, value, documentation];
    }
}
exports.LegacyVariableDeclarationProcessor = LegacyVariableDeclarationProcessor;
//# sourceMappingURL=variable_declaration_processor.js.map