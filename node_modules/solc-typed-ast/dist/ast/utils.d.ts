import { FunctionKind } from "./constants";
export type SourceLocation = {
    offset: number;
    length: number;
    sourceIndex: number;
};
/**
 * Splits the string using the separator.
 * If the string contains well formed parenthesized expressions
 * then those expression will not be split even if they contain separators.
 *
 * E.g. if we call `split("a,b,c(d,e)", ",", "(", ")")` we will get `["a", "b", "c(d,e)"]`.
 *
 * @param string       String to split
 * @param separator    Separator to use to split the string
 * @param openBrace    String to consider to be an "opening brace"
 * @param closeBrace   String to consider to be a "closing brace"
 *
 * @returns Return the parts into which s has been split.
 */
export declare function split(string: string, separator: string, openBrace: string, closeBrace: string): string[];
export declare function encodeFuncSignature(signature: string, hexPrefix?: boolean): string;
export declare function encodeEventSignature(signature: string, hexPrefix?: boolean): string;
export declare function sequence(start?: number, step?: number): Generator<number, number, number>;
export declare function parseSourceLocation(range: string): SourceLocation;
export declare function detectFunctionKind(attributes: any): FunctionKind;
//# sourceMappingURL=utils.d.ts.map