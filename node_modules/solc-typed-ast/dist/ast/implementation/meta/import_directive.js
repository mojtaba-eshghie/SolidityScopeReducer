"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportDirective = void 0;
const ast_node_1 = require("../../ast_node");
const identifier_1 = require("../expression/identifier");
class ImportDirective extends ast_node_1.ASTNode {
    constructor(id, src, file, absolutePath, unitAlias, symbolAliases, scope, sourceUnit, raw) {
        super(id, src, raw);
        this.file = file;
        this.absolutePath = absolutePath;
        this.unitAlias = unitAlias;
        this.symbolAliases = symbolAliases;
        this.scope = scope;
        this.sourceUnit = sourceUnit;
        this.acceptChildren();
    }
    get children() {
        const nodes = [];
        for (const alias of this.symbolAliases) {
            if (alias.foreign instanceof identifier_1.Identifier) {
                nodes.push(alias.foreign);
            }
        }
        return nodes;
    }
    /**
     * Reference to its scoped source unit
     */
    get vScope() {
        return this.requiredContext.locate(this.scope);
    }
    set vScope(value) {
        if (!this.requiredContext.contains(value)) {
            throw new Error(`Node ${value.type}#${value.id} not belongs to a current context`);
        }
        this.scope = value.id;
    }
    /**
     * Reference to the imported source unit
     */
    get vSourceUnit() {
        return this.requiredContext.locate(this.sourceUnit);
    }
    set vSourceUnit(value) {
        if (!this.requiredContext.contains(value)) {
            throw new Error(`Node ${value.type}#${value.id} not belongs to a current context`);
        }
        this.sourceUnit = value.id;
    }
    /**
     * Symbol aliases, resolved to their original declarations.
     */
    get vSymbolAliases() {
        const result = [];
        const candidates = this.vSourceUnit.vExportedSymbols;
        for (const alias of this.symbolAliases) {
            if (alias.foreign instanceof identifier_1.Identifier) {
                const definition = candidates.get(alias.foreign.name);
                if (definition) {
                    result.push([definition, alias.local === null ? undefined : alias.local]);
                }
            }
        }
        return result;
    }
}
exports.ImportDirective = ImportDirective;
//# sourceMappingURL=import_directive.js.map