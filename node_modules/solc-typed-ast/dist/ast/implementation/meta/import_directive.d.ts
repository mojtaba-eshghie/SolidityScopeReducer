import { ASTNode } from "../../ast_node";
import { Identifier } from "../expression/identifier";
import { ExportedSymbol, SourceUnit } from "./source_unit";
export interface SymbolAlias {
    foreign: number | Identifier;
    local: string | null;
}
export type SymbolOrigin = ExportedSymbol;
export type ResolvedSymbolAlias = [SymbolOrigin, string | undefined];
export declare class ImportDirective extends ASTNode {
    /**
     * File path to the imported source file
     */
    file: string;
    /**
     * Resolved absolute file path to the imported source file
     */
    absolutePath: string;
    /**
     * An alias symbol what will be used as the reference to access exports
     * of the imported source unit
     */
    unitAlias: string;
    /**
     * An array of locally aliased symbols, that are imported from unit.
     */
    symbolAliases: SymbolAlias[];
    /**
     * Id of the scoped source unit
     */
    scope: number;
    /**
     * Id of the imported source unit
     */
    sourceUnit: number;
    constructor(id: number, src: string, file: string, absolutePath: string, unitAlias: string, symbolAliases: SymbolAlias[], scope: number, sourceUnit: number, raw?: any);
    get children(): readonly ASTNode[];
    /**
     * Reference to its scoped source unit
     */
    get vScope(): SourceUnit;
    set vScope(value: SourceUnit);
    /**
     * Reference to the imported source unit
     */
    get vSourceUnit(): SourceUnit;
    set vSourceUnit(value: SourceUnit);
    /**
     * Symbol aliases, resolved to their original declarations.
     */
    get vSymbolAliases(): ResolvedSymbolAlias[];
}
//# sourceMappingURL=import_directive.d.ts.map