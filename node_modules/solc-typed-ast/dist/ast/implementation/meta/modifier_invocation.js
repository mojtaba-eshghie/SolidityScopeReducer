"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModifierInvocation = void 0;
const ast_node_1 = require("../../ast_node");
class ModifierInvocation extends ast_node_1.ASTNode {
    constructor(id, src, modifierName, args, kind, raw) {
        super(id, src, raw);
        this.kind = kind;
        this.vModifierName = modifierName;
        this.vArguments = args;
        this.acceptChildren();
    }
    get children() {
        return this.pickNodes(this.vModifierName, this.vArguments);
    }
    /**
     * Reference to the `ModifierDefinition` or `ContractDefinition`.
     *
     * There is a possibility that constructor of the current contract
     * invokes a constructor of the super contract.
     * The `ContractDefinition` of a super contract is the value in such case.
     */
    get vModifier() {
        return this.vModifierName.vReferencedDeclaration;
    }
}
exports.ModifierInvocation = ModifierInvocation;
//# sourceMappingURL=modifier_invocation.js.map