"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnumDefinition = void 0;
const __1 = require("../../..");
const ast_node_1 = require("../../ast_node");
const enum_value_1 = require("./enum_value");
class EnumDefinition extends ast_node_1.ASTNodeWithChildren {
    constructor(id, src, name, members, documentation, nameLocation, raw) {
        super(id, src, raw);
        this.name = name;
        for (const member of members) {
            this.appendChild(member);
        }
        this.documentation = documentation;
        this.nameLocation = nameLocation;
    }
    /**
     * Canonical name (or qualified name), e.g. `DefiningContract.SomeEnum`
     */
    get canonicalName() {
        return (0, __1.getFQDefName)(this);
    }
    /**
     * Optional documentation appearing above the contract definition:
     * - Is `undefined` when not specified.
     * - Is type of `string` when specified and compiler version is older than `0.6.3`.
     * - Is instance of `StructuredDocumentation` when specified and compiler version is `0.6.3` or newer.
     */
    get documentation() {
        return (0, __1.getDocumentation)(this);
    }
    set documentation(value) {
        (0, __1.setDocumentation)(this, value);
    }
    /**
     * Optional documentation that is dangling in the source fragment,
     * that is after end of last child and before the end of the current node.
     *
     * It is:
     * - Is `undefined` when not detected.
     * - Is type of `string` for compatibility reasons.
     */
    get danglingDocumentation() {
        return (0, __1.getDanglingDocumentation)(this);
    }
    set danglingDocumentation(value) {
        (0, __1.setDanglingDocumentation)(this, value);
    }
    /**
     * Array of the enum values
     */
    get vMembers() {
        return this.ownChildren.filter((node) => node instanceof enum_value_1.EnumValue);
    }
    /**
     * Reference to a scoped contract or source unit
     */
    get vScope() {
        return this.parent;
    }
    toUintTypeString() {
        return (0, __1.enumToIntType)(this).pp();
    }
}
exports.EnumDefinition = EnumDefinition;
//# sourceMappingURL=enum_definition.js.map