"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VariableDeclaration = void 0;
const ast_node_1 = require("../../ast_node");
class VariableDeclaration extends ast_node_1.ASTNode {
    constructor(id, src, constant, indexed, name, scope, stateVariable, storageLocation, visibility, mutability, typeString, documentation, typeName, overrideSpecifier, value, nameLocation, raw) {
        super(id, src, raw);
        this.constant = constant;
        this.indexed = indexed;
        this.name = name;
        this.scope = scope;
        this.stateVariable = stateVariable;
        this.storageLocation = storageLocation;
        this.visibility = visibility;
        this.mutability = mutability;
        this.typeString = typeString;
        this.documentation = documentation;
        this.nameLocation = nameLocation;
        this.vType = typeName;
        this.vOverrideSpecifier = overrideSpecifier;
        this.vValue = value;
        this.acceptChildren();
    }
    get children() {
        return this.pickNodes(this.documentation, this.vType, this.vOverrideSpecifier, this.vValue);
    }
    /**
     * Check type of scope as a VariableDeclaration can be in the scope of different declarations
     */
    get vScope() {
        return this.requiredContext.locate(this.scope);
    }
    set vScope(value) {
        if (!this.requiredContext.contains(value)) {
            throw new Error(`Node ${value.type}#${value.id} not belongs to a current context`);
        }
        this.scope = value.id;
    }
}
exports.VariableDeclaration = VariableDeclaration;
//# sourceMappingURL=variable_declaration.js.map