"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionDefinition = void 0;
const ast_node_1 = require("../../ast_node");
class FunctionDefinition extends ast_node_1.ASTNode {
    constructor(id, src, scope, kind, name, virtual, visibility, stateMutability, isConstructor, parameters, returnParameters, modifiers, overrideSpecifier, body, documentation, nameLocation, raw) {
        super(id, src, raw);
        this.implemented = body !== undefined;
        this.virtual = virtual;
        this.scope = scope;
        this.kind = kind;
        this.name = name;
        this.visibility = visibility;
        this.stateMutability = stateMutability;
        this.isConstructor = isConstructor;
        this.documentation = documentation;
        this.nameLocation = nameLocation;
        this.vParameters = parameters;
        this.vReturnParameters = returnParameters;
        this.vModifiers = modifiers;
        this.vOverrideSpecifier = overrideSpecifier;
        this.vBody = body;
        this.acceptChildren();
    }
    get children() {
        return this.pickNodes(this.documentation, this.vParameters, this.vOverrideSpecifier, this.vModifiers, this.vReturnParameters, this.vBody);
    }
    /**
     * Reference to a scoped `ContractDefinition` if function is declared in contract.
     * Reference to a scoped `SourceUnit` if function is declared on file level
     * (since Solidity 0.7.1).
     */
    get vScope() {
        return this.requiredContext.locate(this.scope);
    }
    set vScope(value) {
        if (!this.requiredContext.contains(value)) {
            throw new Error(`Node ${value.type}#${value.id} not belongs to a current context`);
        }
        this.scope = value.id;
    }
}
exports.FunctionDefinition = FunctionDefinition;
//# sourceMappingURL=function_definition.js.map