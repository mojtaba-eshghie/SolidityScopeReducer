import { ASTNode } from "../../ast_node";
import { FunctionStateMutability, FunctionVisibility } from "../../constants";
import { ParameterList } from "../meta/parameter_list";
import { TypeName } from "./type_name";
export declare class FunctionTypeName extends TypeName {
    /**
     * Function visibility, for example: `public`, `internal`, `private` or `external`.
     */
    visibility: FunctionVisibility;
    /**
     * Function state mutability, that is non-payable, `payable`, `pure` or `view`.
     * Deprecated `constant` is only allowed in 0.4.x
     */
    stateMutability: FunctionStateMutability;
    /**
     * A list of local variables that are declared and initialized with the input values
     */
    vParameterTypes: ParameterList;
    /**
     * A list of local variables that are declared and returned to the caller
     */
    vReturnParameterTypes: ParameterList;
    constructor(id: number, src: string, typeString: string, visibility: FunctionVisibility, stateMutability: FunctionStateMutability, parameterTypes: ParameterList, returnParameterTypes: ParameterList, raw?: any);
    get children(): readonly ASTNode[];
}
//# sourceMappingURL=function_type_name.d.ts.map