import { ASTNode } from "../../ast_node";
import { Expression } from "./expression";
export declare class FunctionCallOptions extends Expression {
    /**
     * Function expression. For following example:
     * ```
     * foreign.buy{gas: 2000, value: 1 gwei}(1000);
     * ```
     * Will contain `foreign.buy` member access.
     */
    vExpression: Expression;
    /**
     * Option name/value pairs, respecting order.
     */
    vOptionsMap: Map<string, Expression>;
    constructor(id: number, src: string, typeString: string, expression: Expression, options: Map<string, Expression>, raw?: any);
    get children(): readonly ASTNode[];
    /**
     * Specified option names, respecting order. For following example:
     * ```
     * foreign.buy{gas: 2000, value: 1 gwei}(1000);
     * ```
     * Will contain `["gas", "value"]`.
     */
    get names(): Iterable<string>;
    /**
     * Specified option values, respecting order. For following example:
     * ```
     * foreign.buy{gas: 2000, value: 1 gwei}(1000);
     * ```
     * Will contain `[2000, 1 gwei]` literal expressions.
     */
    get vOptions(): Iterable<Expression>;
}
//# sourceMappingURL=function_call_options.d.ts.map