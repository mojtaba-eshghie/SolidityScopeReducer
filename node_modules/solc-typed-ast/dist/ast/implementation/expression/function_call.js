"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionCall = void 0;
const constants_1 = require("../../constants");
const elementary_type_name_expression_1 = require("./elementary_type_name_expression");
const expression_1 = require("./expression");
const function_call_options_1 = require("./function_call_options");
const identifier_1 = require("./identifier");
const member_access_1 = require("./member_access");
const new_expression_1 = require("./new_expression");
class FunctionCall extends expression_1.Expression {
    constructor(id, src, typeString, kind, expression, args, fieldNames, raw) {
        super(id, src, typeString, raw);
        this.kind = kind;
        this.fieldNames = fieldNames;
        this.vExpression = expression;
        this.vArguments = args;
        this.acceptChildren();
    }
    get children() {
        return this.pickNodes(this.vExpression, this.vArguments);
    }
    /**
     * Identifier of the function name, e.g. `sha3(...)`
     */
    get vIdentifier() {
        const expression = this.vCallee;
        if (expression instanceof new_expression_1.NewExpression) {
            return "new";
        }
        if (expression instanceof elementary_type_name_expression_1.ElementaryTypeNameExpression) {
            if (typeof expression.typeName === "string") {
                return expression.typeName;
            }
            const expressionType = expression.typeName;
            if (expressionType.name === "address") {
                return expressionType.stateMutability === "payable" ? "payable" : "address";
            }
            return expressionType.name;
        }
        if (expression instanceof member_access_1.MemberAccess) {
            return expression.vExpression.name;
        }
        if (expression instanceof identifier_1.Identifier) {
            return expression.name;
        }
        return "unknown";
    }
    /**
     * Is either empty and in this case the `Identifier` is the function name
     * or if there is `MemberAccess` then the `memberName` is the second part of the `p1.p2`,
     * e.g. the `memberName` from `someUintArray.push(123)` is `push`.
     */
    get vMemberName() {
        const expression = this.vCallee;
        return expression instanceof member_access_1.MemberAccess ? expression.memberName : undefined;
    }
    /**
     * Solidity builtin or user-defined function
     */
    get vFunctionCallType() {
        const expression = this.vCallee;
        if (expression instanceof member_access_1.MemberAccess && expression.vReferencedDeclaration) {
            return constants_1.ExternalReferenceType.UserDefined;
        }
        if (expression instanceof identifier_1.Identifier) {
            return expression.vIdentifierType;
        }
        return constants_1.ExternalReferenceType.Builtin;
    }
    /**
     * Called function or event definition reference
     */
    get vReferencedDeclaration() {
        const expression = this.vCallee;
        if (expression instanceof member_access_1.MemberAccess || expression instanceof identifier_1.Identifier) {
            return expression.vReferencedDeclaration;
        }
        return undefined;
    }
    /**
     * `identifier.memberName` or if `memberName` is empty it is `identifier`
     */
    get vFunctionName() {
        const memberName = this.vMemberName;
        const identifier = this.vIdentifier;
        return memberName === undefined ? identifier : memberName;
    }
    /**
     * When expression is `<actual function>.value(5)(...)`
     * returns `<actual function>` without `gas()`, `value()` call modifiers
     * or `<actual function>{gas: X, value: Y}` options.
     *
     * While loop is here due to `.gas()`, `.value()` modifiers
     * and call options can be nested.
     */
    get vCallee() {
        let expression = this.vExpression;
        while (true) {
            if (expression instanceof FunctionCall &&
                (expression.vFunctionName === "gas" || expression.vFunctionName === "value") &&
                expression.vExpression instanceof member_access_1.MemberAccess) {
                expression = expression.vExpression.vExpression;
            }
            else if (expression instanceof function_call_options_1.FunctionCallOptions) {
                expression = expression.vExpression;
            }
            else {
                return expression;
            }
        }
    }
}
exports.FunctionCall = FunctionCall;
//# sourceMappingURL=function_call.js.map