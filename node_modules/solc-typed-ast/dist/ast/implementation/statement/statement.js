"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatementWithChildren = exports.Statement = void 0;
const ast_node_1 = require("../../ast_node");
const documentation_1 = require("../../documentation");
class Statement extends ast_node_1.ASTNode {
    constructor(id, src, documentation, raw) {
        super(id, src, raw);
        this.documentation = documentation;
    }
    get children() {
        return this.pickNodes(this.documentation);
    }
}
exports.Statement = Statement;
class StatementWithChildren extends ast_node_1.ASTNodeWithChildren {
    constructor(id, src, documentation, raw) {
        super(id, src, raw);
        this.documentation = documentation;
    }
    /**
     * Optional documentation appearing above the contract definition:
     * - Is `undefined` when not specified.
     * - Is type of `string` when specified and compiler version is older than `0.6.3`.
     * - Is instance of `StructuredDocumentation` when specified and compiler version is `0.6.3` or newer.
     */
    get documentation() {
        return (0, documentation_1.getDocumentation)(this);
    }
    set documentation(value) {
        (0, documentation_1.setDocumentation)(this, value);
    }
    /**
     * Optional documentation that is dangling in the source fragment,
     * that is after end of last child and before the end of the current node.
     *
     * It is:
     * - Is `undefined` when not detected.
     * - Is type of `string` for compatibility reasons.
     */
    get danglingDocumentation() {
        return (0, documentation_1.getDanglingDocumentation)(this);
    }
    set danglingDocumentation(value) {
        (0, documentation_1.setDanglingDocumentation)(this, value);
    }
}
exports.StatementWithChildren = StatementWithChildren;
//# sourceMappingURL=statement.js.map