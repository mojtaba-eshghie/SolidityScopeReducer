"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalNpmResolver = exports.FileSystemResolver = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const misc_1 = require("../misc");
const findUpSync = require("findup-sync");
class FileSystemResolver {
    constructor(basePath, includePaths) {
        this.basePath = basePath;
        this.includePaths = includePaths;
    }
    resolve(fileName) {
        const prefixes = [this.basePath ? this.basePath : ""].concat(this.includePaths ? this.includePaths : []);
        for (const prefix of prefixes) {
            let candidate;
            if (prefix) {
                const relative = path_1.default.relative(prefix, fileName);
                candidate = path_1.default.join(prefix, relative.startsWith("../") ? fileName : relative);
            }
            else {
                candidate = fileName;
            }
            if (fs_extra_1.default.existsSync(candidate)) {
                return candidate;
            }
        }
        return undefined;
    }
}
exports.FileSystemResolver = FileSystemResolver;
class LocalNpmResolver {
    constructor(basePath, inferedRemappings) {
        this.basePath = basePath;
        this.inferedRemappings = inferedRemappings;
    }
    resolve(fileName) {
        (0, misc_1.assert)(this.basePath !== undefined, "LocalNpmResolver: base path is not set");
        let currentDir = this.basePath;
        const normalizedFileName = path_1.default.normalize(fileName);
        while (true) {
            const modulesPath = findUpSync("node_modules/", { cwd: currentDir });
            if (modulesPath === null) {
                break;
            }
            const modulePath = path_1.default.join(modulesPath, normalizedFileName);
            if (fs_extra_1.default.existsSync(modulePath)) {
                if (this.inferedRemappings) {
                    const [prefix] = normalizedFileName.split("/");
                    /**
                     * If the normalized paths are starting with
                     * a proper directory name X (not "." or ".."),
                     * then we can infer a remapping from X to "modulesPath/X/"
                     */
                    if (prefix && prefix !== "." && prefix !== "..") {
                        const remapping = ["", prefix, path_1.default.join(modulesPath, prefix)];
                        this.inferedRemappings.set(fileName, remapping);
                    }
                }
                return modulePath;
            }
            const oldDir = currentDir;
            currentDir = path_1.default.join(currentDir, "..");
            if (oldDir === currentDir) {
                break;
            }
        }
        return undefined;
    }
}
exports.LocalNpmResolver = LocalNpmResolver;
//# sourceMappingURL=import_resolver.js.map