"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCompilerInput = void 0;
const misc_1 = require("../misc");
const constants_1 = require("./constants");
function mergeCompilerSettings(input, settings) {
    if (settings !== undefined) {
        for (const key in settings) {
            if (key === "outputSelection") {
                continue;
            }
            input.settings[key] = settings[key];
        }
    }
    return input;
}
/**
 * Create valid standard JSON input for the solidity compiler as specified in
 * https://docs.soliditylang.org/en/latest/using-the-compiler.html.
 *
 * This handles the differences in the JSON input between different compiler versions.
 */
function createCompilerInput(files, remappings, output, compilerSettings) {
    let fileOutput = [];
    let contractOutput = [];
    for (const outputSel of output) {
        if (outputSel === constants_1.CompilationOutput.ALL) {
            fileOutput = [constants_1.CompilationOutput.ALL];
            contractOutput = [constants_1.CompilationOutput.ALL];
            break;
        }
        if (outputSel === constants_1.CompilationOutput.AST) {
            fileOutput.push(outputSel);
        }
        else {
            contractOutput.push(outputSel);
        }
    }
    const partialInp = {
        language: "Solidity",
        settings: {
            remappings,
            outputSelection: {
                "*": {
                    "*": contractOutput,
                    "": fileOutput
                }
            }
        }
    };
    partialInp.sources = {};
    for (const [fileName, content] of files.entries()) {
        partialInp.sources[fileName] = { content: (0, misc_1.bytesToString)(content) };
    }
    const input = partialInp;
    return mergeCompilerSettings(input, compilerSettings);
}
exports.createCompilerInput = createCompilerInput;
//# sourceMappingURL=input.js.map