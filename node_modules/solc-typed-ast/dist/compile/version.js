"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractSpecifiersFromSource = exports.normalizeSpecifier = exports.getCompilerVersionsBySpecifiers = exports.isExact = exports.isFloating = exports.isFixed = void 0;
const semver_1 = __importDefault(require("semver"));
const rx = {
    comments: /\/\*[\s\S]*?\*\/|\/\/.*$/gm,
    pragmaSolidity: /pragma solidity\s+([^;]+);/g,
    space: /\s+/g,
    operator: /([^\d.*]+)/g,
    spaceDash: /( -)/g,
    fixed: /^=?\d+\.\d+\.\d+$/,
    exact: /^\d+.\d+.\d+$/
};
function isFixed(version) {
    return rx.fixed.test(version);
}
exports.isFixed = isFixed;
function isFloating(version) {
    return !isFixed(version);
}
exports.isFloating = isFloating;
function isExact(version) {
    return rx.exact.test(version);
}
exports.isExact = isExact;
function getCompilerVersionsBySpecifiers(specifiers, versions) {
    let supported = versions;
    for (const specifier of specifiers) {
        const compatible = [];
        for (const version of supported) {
            if (semver_1.default.satisfies(version, specifier) && !compatible.includes(version)) {
                compatible.push(version);
            }
        }
        supported = compatible;
    }
    return supported;
}
exports.getCompilerVersionsBySpecifiers = getCompilerVersionsBySpecifiers;
function trimAny(input, chars) {
    let start = 0;
    let end = input.length;
    while (start < end && chars.indexOf(input[start]) >= 0)
        ++start;
    while (end > start && chars.indexOf(input[end - 1]) >= 0)
        --end;
    return start > 0 || end < input.length ? input.substring(start, end) : input;
}
function normalizeSpecifier(specifier) {
    return trimAny(specifier, "\"'")
        .replace(rx.space, "")
        .replace(rx.operator, " $1")
        .replace(rx.spaceDash, "$1 ")
        .trimStart();
}
exports.normalizeSpecifier = normalizeSpecifier;
function extractSpecifiersFromSource(source) {
    const specifiers = [];
    source = source.replace(rx.comments, "");
    let match = rx.pragmaSolidity.exec(source);
    while (match) {
        const specifier = normalizeSpecifier(match[1]);
        specifiers.push(specifier);
        match = rx.pragmaSolidity.exec(source);
    }
    return specifiers;
}
exports.extractSpecifiersFromSource = extractSpecifiersFromSource;
//# sourceMappingURL=version.js.map