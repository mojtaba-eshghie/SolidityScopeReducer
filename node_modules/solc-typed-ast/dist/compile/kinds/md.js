"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCompilerMDForPlatform = exports.downloadCompilerMDForPlatform = exports.getCachedMDPath = exports.isSubDir = exports.BINARIES_URL = exports.CACHE_DIR = exports.getCompilerPrefixForOs = void 0;
const axios_1 = __importDefault(require("axios"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const utils_1 = require("../../misc/utils");
function getCompilerPrefixForOs() {
    const arch = os_1.default.arch();
    /**
     * Only 64 bit native compilers built
     */
    if (arch !== "x64") {
        return undefined;
    }
    const type = os_1.default.type();
    if (type === "Linux") {
        return "linux-amd64";
    }
    if (type === "Windows_NT") {
        return "windows-amd64";
    }
    if (type === "Darwin") {
        return "macosx-amd64";
    }
    return undefined;
}
exports.getCompilerPrefixForOs = getCompilerPrefixForOs;
const cacheDirDefault = path_1.default.join(__dirname, "..", "..", "..", ".compiler_cache");
const cacheDirCustom = process.env["SOL_AST_COMPILER_CACHE"];
exports.CACHE_DIR = cacheDirCustom === undefined ? cacheDirDefault : cacheDirCustom;
exports.BINARIES_URL = "https://binaries.soliditylang.org";
/**
 * Return true IFF child is a subdirectory of parent.
 */
function isSubDir(child, parent) {
    const relPath = path_1.default.relative(parent, child);
    return !path_1.default.isAbsolute(relPath) && !relPath.startsWith("..");
}
exports.isSubDir = isSubDir;
function getCachedMDPath(prefix) {
    const listPath = path_1.default.join(exports.CACHE_DIR, prefix, "list.json");
    (0, utils_1.assert)(isSubDir(listPath, exports.CACHE_DIR), `Path ${listPath} escapes from cache dir ${exports.CACHE_DIR}`);
    return listPath;
}
exports.getCachedMDPath = getCachedMDPath;
async function downloadCompilerMDForPlatform(prefix) {
    const cachedListPath = getCachedMDPath(prefix);
    const response = await axios_1.default.get(`${exports.BINARIES_URL}/${prefix}/list.json`);
    const metaData = response.data;
    await fs_extra_1.default.ensureDir(path_1.default.dirname(cachedListPath));
    await fs_extra_1.default.writeJSON(cachedListPath, metaData);
    return metaData;
}
exports.downloadCompilerMDForPlatform = downloadCompilerMDForPlatform;
async function getCompilerMDForPlatform(prefix, version) {
    const cachedListPath = getCachedMDPath(prefix);
    if (fs_extra_1.default.existsSync(cachedListPath)) {
        const md = await fs_extra_1.default.readJSON(cachedListPath);
        if (version in md.releases) {
            return md;
        }
    }
    return downloadCompilerMDForPlatform(prefix);
}
exports.getCompilerMDForPlatform = getCompilerMDForPlatform;
//# sourceMappingURL=md.js.map