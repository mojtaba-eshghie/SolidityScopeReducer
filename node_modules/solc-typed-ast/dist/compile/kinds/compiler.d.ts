import { CompilerKind } from "..";
import { SolcInput } from "../input";
export declare abstract class Compiler {
    readonly version: string;
    readonly path: string;
    constructor(version: string, path: string);
    abstract compile(inputJson: SolcInput): Promise<any>;
}
export declare class NativeCompiler extends Compiler {
    compile(input: SolcInput): Promise<any>;
}
export declare class WasmCompiler extends Compiler {
    compile(input: SolcInput): Promise<any>;
}
type CompilerMapping = [CompilerKind.Native, NativeCompiler] | [CompilerKind.WASM, WasmCompiler];
export declare function getCompilerLocalPath(prefix: string, compilerFileName: string): string;
export declare function getCompilerForVersion<T extends CompilerMapping>(version: string, kind: T[0]): Promise<T[1] | undefined>;
export declare function downloadSupportedCompilers(kinds: CompilerKind[]): AsyncGenerator<Compiler>;
export {};
//# sourceMappingURL=compiler.d.ts.map