"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserDefinedType = void 0;
const ast_1 = require("../../ast");
const type_1 = require("./type");
class UserDefinedType extends type_1.TypeNode {
    constructor(name, definition, src) {
        super(src);
        this.name = name;
        this.definition = definition;
    }
    pp() {
        if (this.definition instanceof ast_1.UserDefinedValueTypeDefinition) {
            return this.name;
        }
        let typePrefix;
        if (this.definition instanceof ast_1.StructDefinition) {
            typePrefix = "struct";
        }
        else if (this.definition instanceof ast_1.EnumDefinition) {
            typePrefix = "enum";
        }
        else {
            typePrefix = this.definition.kind == ast_1.ContractKind.Library ? "library" : "contract";
        }
        return `${typePrefix} ${this.name}`;
    }
    getFields() {
        // Its possible to have the same user defined type imported with 2 different names
        return [this.definition.id];
    }
}
exports.UserDefinedType = UserDefinedType;
//# sourceMappingURL=user_defined_type.js.map