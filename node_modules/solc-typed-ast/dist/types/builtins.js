"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.globalBuiltins = exports.address06PayableBuiltins = exports.address06Builtins = exports.addressBuiltins = exports.tx = exports.block = exports.msg = exports.abi = exports.typeInterface = exports.typeContract = exports.typeInt = void 0;
const ast_1 = require("./ast");
const reserved_1 = require("./reserved");
/**
 * Type of the type(T) function when T is an int type
 */
exports.typeInt = new ast_1.BuiltinFunctionType("type", [new ast_1.TypeNameType(new ast_1.TVar("T"))], [
    new ast_1.BuiltinStructType("typeInt", new Map([
        ["min", [[new ast_1.TVar("T"), ">=0.6.8"]]],
        ["max", [[new ast_1.TVar("T"), ">=0.6.8"]]]
    ]))
]);
/**
 * Type of the type(T) function when T is a contract
 */
exports.typeContract = new ast_1.BuiltinFunctionType("type", [new ast_1.TypeNameType(new ast_1.TVar("T"))], [
    new ast_1.BuiltinStructType("typeContract", new Map([
        ["name", [[reserved_1.types.stringMemory, ">=0.5.5"]]],
        ["creationCode", [[reserved_1.types.bytesMemory, ">=0.5.3"]]],
        ["runtimeCode", [[reserved_1.types.bytesMemory, ">=0.5.3"]]]
    ]))
]);
/**
 * Type of the type(T) function when T is an interface
 */
exports.typeInterface = new ast_1.BuiltinFunctionType("type", [new ast_1.TypeNameType(new ast_1.TVar("T"))], [
    new ast_1.BuiltinStructType("typeInterface", new Map([
        ["name", [[reserved_1.types.stringMemory, ">=0.5.5"]]],
        ["creationCode", [[reserved_1.types.bytesMemory, ">=0.5.3"]]],
        ["runtimeCode", [[reserved_1.types.bytesMemory, ">=0.5.3"]]],
        ["interfaceId", [[reserved_1.types.bytes4, ">=0.6.7"]]]
    ]))
]);
exports.abi = new ast_1.BuiltinStructType("abi", new Map([
    /// NOTE: abi.decode is handled as a special case in infer.ts as its not easy to express
    /// as a simple polymorphic function
    [
        "encode",
        [[new ast_1.BuiltinFunctionType("encode", [new ast_1.TRest("T")], [reserved_1.types.bytesMemory]), ">=0.4.22"]]
    ],
    [
        "encodePacked",
        [
            [
                new ast_1.BuiltinFunctionType("encodePacked", [new ast_1.TRest("T")], [reserved_1.types.bytesMemory]),
                ">=0.4.22"
            ]
        ]
    ],
    [
        "encodeWithSelector",
        [
            [
                new ast_1.BuiltinFunctionType("encodeWithSelector", [reserved_1.types.bytes4, new ast_1.TRest("T")], [reserved_1.types.bytesMemory]),
                ">=0.4.22"
            ]
        ]
    ],
    [
        "encodeWithSignature",
        [
            [
                new ast_1.BuiltinFunctionType("encodeWithSignature", [reserved_1.types.stringMemory, new ast_1.TRest("T")], [reserved_1.types.bytesMemory]),
                ">=0.4.22"
            ]
        ]
    ],
    [
        "encodeCall",
        [
            [
                new ast_1.BuiltinFunctionType("encodeCall", [new ast_1.TVar("TFunPtr"), new ast_1.TRest("T")], [reserved_1.types.bytesMemory]),
                ">=0.8.11"
            ]
        ]
    ]
]));
exports.msg = new ast_1.BuiltinStructType("msg", new Map([
    ["data", [[reserved_1.types.bytesCalldata, ">=0.4.13"]]],
    [
        "sender",
        [
            [reserved_1.types.address, "<0.5.0"],
            [reserved_1.types.address, ">=0.8.0"],
            [reserved_1.types.addressPayable, ">=0.5.0 <0.8.0"]
        ]
    ],
    ["sig", [[reserved_1.types.bytes4, ">=0.4.13"]]],
    ["value", [[reserved_1.types.uint256, ">=0.4.13"]]],
    ["gas", [[reserved_1.types.uint256, "<0.5.0"]]]
]));
exports.block = new ast_1.BuiltinStructType("block", new Map([
    ["chainid", [[reserved_1.types.uint256, ">=0.8.0"]]],
    [
        "coinbase",
        [
            [reserved_1.types.address, "<0.5.0"],
            [reserved_1.types.addressPayable, ">=0.5.0"]
        ]
    ],
    ["basefee", [[reserved_1.types.uint256, ">=0.8.7"]]],
    ["difficulty", [[reserved_1.types.uint256, ">=0.4.13"]]],
    ["gaslimit", [[reserved_1.types.uint256, ">=0.4.13"]]],
    ["number", [[reserved_1.types.uint256, ">=0.4.13"]]],
    [
        "blockhash",
        [[new ast_1.BuiltinFunctionType("blockhash", [reserved_1.types.uint256], [reserved_1.types.bytes32]), "<0.5.0"]]
    ],
    ["timestamp", [[reserved_1.types.uint256, ">=0.4.13"]]]
]));
exports.tx = new ast_1.BuiltinStructType("tx", new Map([
    ["gasprice", [[new ast_1.IntType(256, false), ">=0.4.13"]]],
    [
        "origin",
        [
            [reserved_1.types.address, "<0.5.0"],
            [reserved_1.types.address, ">=0.8.0"],
            [reserved_1.types.addressPayable, ">=0.5.0 <0.8.0"]
        ]
    ]
]));
const addressFields = [
    ["balance", [[reserved_1.types.uint256, ">=0.4.13"]]],
    ["code", [[reserved_1.types.bytesMemory, ">=0.8.0"]]],
    ["codehash", [[reserved_1.types.bytes32, ">=0.8.0"]]],
    [
        "delegatecall",
        [
            [new ast_1.BuiltinFunctionType("delegatecall", [new ast_1.TRest("T")], [reserved_1.types.bool]), "<0.5.0"],
            [
                new ast_1.BuiltinFunctionType("delegatecall", [reserved_1.types.bytesMemory], [reserved_1.types.bool, reserved_1.types.bytesMemory]),
                ">=0.5.0"
            ]
        ]
    ],
    ["callcode", [[new ast_1.BuiltinFunctionType("callcode", [new ast_1.TRest("T")], [reserved_1.types.bool]), "<0.5.0"]]],
    [
        "call",
        [
            [new ast_1.BuiltinFunctionType("call", [new ast_1.TRest("T")], [reserved_1.types.bool]), "<0.5.0"],
            [
                new ast_1.BuiltinFunctionType("call", [reserved_1.types.bytesMemory], [reserved_1.types.bool, reserved_1.types.bytesMemory]),
                ">=0.5.0"
            ]
        ]
    ],
    [
        "staticcall",
        [
            [
                new ast_1.BuiltinFunctionType("staticcall", [reserved_1.types.bytesMemory], [reserved_1.types.bool, reserved_1.types.bytesMemory]),
                ">=0.5.0"
            ]
        ]
    ]
];
const addressPayableFields = [
    ["transfer", [[new ast_1.BuiltinFunctionType("transfer", [reserved_1.types.uint256], []), ">=0.4.13"]]],
    ["send", [[new ast_1.BuiltinFunctionType("send", [reserved_1.types.uint256], [reserved_1.types.bool]), ">=0.4.13"]]]
];
exports.addressBuiltins = new ast_1.BuiltinStructType("address", new Map([...addressFields, ...addressPayableFields]));
exports.address06Builtins = new ast_1.BuiltinStructType("address", new Map([...addressFields, ...addressPayableFields]));
exports.address06PayableBuiltins = new ast_1.BuiltinStructType("address", new Map([...addressFields, ...addressPayableFields]));
exports.globalBuiltins = new ast_1.BuiltinStructType("<global_builtins>", new Map([
    ["abi", [[exports.abi, ">=0.4.22"]]],
    ["block", [[exports.block, ">=0.4.13"]]],
    ["tx", [[exports.tx, ">=0.4.13"]]],
    ["msg", [[exports.msg, ">=0.4.13"]]],
    ["gasleft", [[new ast_1.BuiltinFunctionType("gasleft", [], [reserved_1.types.uint256]), ">=0.4.21"]]],
    [
        "blockhash",
        [[new ast_1.BuiltinFunctionType("blockhash", [reserved_1.types.uint256], [reserved_1.types.bytes32]), ">=0.4.22"]]
    ],
    ["assert", [[new ast_1.BuiltinFunctionType("assert", [reserved_1.types.bool], []), ">=0.4.13"]]],
    ["now", [[reserved_1.types.uint256, "<0.7.0"]]],
    [
        "addmod",
        [
            [
                new ast_1.BuiltinFunctionType("addmod", [reserved_1.types.uint256, reserved_1.types.uint256, reserved_1.types.uint256], [reserved_1.types.uint256]),
                ">=0.4.13"
            ]
        ]
    ],
    [
        "mulmod",
        [
            [
                new ast_1.BuiltinFunctionType("mulmod", [reserved_1.types.uint256, reserved_1.types.uint256, reserved_1.types.uint256], [reserved_1.types.uint256]),
                ">=0.4.13"
            ]
        ]
    ],
    ["suicide", [[new ast_1.BuiltinFunctionType("suicide", [reserved_1.types.address], []), "<0.5.0"]]],
    [
        "selfdestruct",
        [
            [new ast_1.BuiltinFunctionType("selfdestruct", [reserved_1.types.address], []), "<0.5.0"],
            [new ast_1.BuiltinFunctionType("selfdestruct", [reserved_1.types.addressPayable], []), ">=0.5.0"]
        ]
    ],
    ["sha3", [[new ast_1.BuiltinFunctionType("sha3", [new ast_1.TRest("T")], [reserved_1.types.bytes32]), "<0.5.0"]]],
    [
        "keccak256",
        [
            [new ast_1.BuiltinFunctionType("keccak256", [new ast_1.TRest("T")], [reserved_1.types.bytes32]), "<0.5.0"],
            [
                new ast_1.BuiltinFunctionType("keccak256", [reserved_1.types.bytesMemory], [reserved_1.types.bytes32]),
                ">=0.5.0"
            ]
        ]
    ],
    [
        "sha256",
        [
            [new ast_1.BuiltinFunctionType("sha256", [new ast_1.TRest("T")], [reserved_1.types.bytes32]), "<0.5.0"],
            [new ast_1.BuiltinFunctionType("sha256", [reserved_1.types.bytesMemory], [reserved_1.types.bytes32]), ">=0.5.0"]
        ]
    ],
    [
        "ripemd160",
        [
            [new ast_1.BuiltinFunctionType("ripemd160", [new ast_1.TRest("T")], [reserved_1.types.bytes20]), "<0.5.0"],
            [
                new ast_1.BuiltinFunctionType("ripemd160", [reserved_1.types.bytesMemory], [reserved_1.types.bytes20]),
                ">=0.5.0"
            ]
        ]
    ],
    [
        "ecrecover",
        [
            [
                new ast_1.BuiltinFunctionType("ecrecover", [reserved_1.types.bytes32, reserved_1.types.uint8, reserved_1.types.bytes32, reserved_1.types.bytes32], [reserved_1.types.address]),
                ">=0.4.13"
            ]
        ]
    ],
    ["log0", [[new ast_1.BuiltinFunctionType("log0", [reserved_1.types.bytes32], []), "<0.8.0"]]],
    ["log1", [[new ast_1.BuiltinFunctionType("log1", [reserved_1.types.bytes32, reserved_1.types.bytes32], []), "<0.8.0"]]],
    [
        "log2",
        [
            [
                new ast_1.BuiltinFunctionType("log2", [reserved_1.types.bytes32, reserved_1.types.bytes32, reserved_1.types.bytes32], []),
                "<0.8.0"
            ]
        ]
    ],
    [
        "log3",
        [
            [
                new ast_1.BuiltinFunctionType("log3", [reserved_1.types.bytes32, reserved_1.types.bytes32, reserved_1.types.bytes32, reserved_1.types.bytes32], []),
                "<0.8.0"
            ]
        ]
    ],
    [
        "log4",
        [
            [
                new ast_1.BuiltinFunctionType("log4", [reserved_1.types.bytes32, reserved_1.types.bytes32, reserved_1.types.bytes32, reserved_1.types.bytes32, reserved_1.types.bytes32], []),
                "<0.8.0"
            ]
        ]
    ]
]));
//# sourceMappingURL=builtins.js.map